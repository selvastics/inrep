% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ui_builder.R
\name{build_study_ui}
\alias{build_study_ui}
\title{Build Themed Study UI for IRT-Based Assessments}
\usage{
build_study_ui(
  study_config = list(),
  theme_config = NULL,
  custom_css = NULL,
  enable_responsive = TRUE,
  enable_accessibility = TRUE,
  custom_js = NULL,
  additional_assets = NULL
)
}
\arguments{
\item{study_config}{List containing study configuration with theme settings.
Common elements include \code{title}, \code{subtitle}, \code{logo_path},
\code{show_progress}, and \code{max_items}.}

\item{theme_config}{List containing theme configuration with styling parameters.
Elements include \code{primary_color}, \code{background_color}, \code{font_family},
and \code{logo_path}.}

\item{custom_css}{Optional character string of custom CSS to include for
additional styling and branding.}

\item{enable_responsive}{Logical indicating whether to enable responsive design
for mobile and tablet compatibility. Default is \code{TRUE}.}

\item{enable_accessibility}{Logical indicating whether to enable accessibility
features (ARIA labels, keyboard navigation). Default is \code{TRUE}.}

\item{custom_js}{Optional character string of custom JavaScript to include
for advanced interactions and analytics.}

\item{additional_assets}{Optional list of additional assets (CSS/JS files)
to include from external sources.}
}
\value{
Shiny UI object with the specified theme and configuration,
  ready for use with \code{\link{launch_study}} or custom Shiny server functions.
}
\description{
Builds a comprehensive Shiny UI for adaptive testing with customizable themes,
professional styling, and accessibility features. Integrates scraped website
assets, custom CSS, and responsive design elements for research-grade assessments.
}
\details{
This function creates a comprehensive Shiny UI for adaptive testing with:

\strong{Core Features:}
\itemize{
  \item Professional header with optional logo and branding
  \item Progress indicators and navigation elements
  \item Responsive item presentation with mobile support
  \item Accessibility features (ARIA labels, keyboard navigation)
  \item Custom CSS/JS integration for advanced customization
  \item Theme switching capabilities for user preferences
}

\strong{Theme Integration:}
\itemize{
  \item Integration with scraped website assets via \code{\link{scrape_website_ui}}
  \item Custom color schemes and typography
  \item Professional styling for research contexts
  \item Responsive design for multiple screen sizes
}

\strong{Accessibility Compliance:}
\itemize{
  \item WCAG 2.1 AA compliance when accessibility is enabled
  \item Screen reader support with proper ARIA labels
  \item Keyboard navigation for all interactive elements
  \item High contrast options and scalable text
}

\strong{Performance Optimization:}
\itemize{
  \item Efficient CSS and JavaScript loading
  \item Responsive image handling
  \item Minimal external dependencies
  \item Progressive enhancement approach
}
}
\examples{
\dontrun{
# Example 1: Basic UI with Default Theme
library(inrep)

# Create basic study configuration
study_config <- list(
  title = "Big Five Personality Assessment",
  subtitle = "Research Study",
  max_items = 20,
  show_progress = TRUE
)

# Build UI with default theme
ui <- build_study_ui(study_config = study_config)

# View UI structure
cat("UI created successfully\n")

# Example 2: Custom Theme from Scraped Website
# First, scrape website for theme assets
scraped_data <- scrape_website_ui("https://www.uni-hildesheim.de/")

# Use scraped theme
custom_study_config <- list(
  title = "Cognitive Assessment Study",
  subtitle = "University Research Project",
  logo_path = "path/to/logo.png",
  max_items = 30,
  show_progress = TRUE,
  enable_theme_switching = TRUE
)

# Build UI with scraped theme
themed_ui <- build_study_ui(
  study_config = custom_study_config,
  theme_config = scraped_data$themes[[1]],
  custom_css = "
    .assessment-container {
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
    }
    .progress-bar {
      background: linear-gradient(45deg, #007bff, #0056b3);
    }
  "
)

# Example 3: Professional Clinical Interface
# Create clinical assessment configuration
clinical_config <- list(
  title = "Clinical Depression Inventory",
  subtitle = "Confidential Assessment",
  max_items = 15,
  show_progress = TRUE,
  enable_theme_switching = FALSE  # Fixed theme for consistency
)

# Clinical theme configuration
clinical_theme <- list(
  name = "Clinical Theme",
  primary_color = "#2c3e50",
  background_color = "#f8f9fa",
  font_family = "'Helvetica Neue', Arial, sans-serif",
  logo_path = "clinical_logo.png"
)

# Build clinical UI
clinical_ui <- build_study_ui(
  study_config = clinical_config,
  theme_config = clinical_theme,
  enable_accessibility = TRUE,
  custom_css = "
    .clinical-interface {
      background: linear-gradient(135deg, #f5f7fa 0\%, #c3cfe2 100\%);
      min-height: 100vh;
    }
    .question-card {
      border: 1px solid #dee2e6;
      border-radius: 8px;
      padding: 24px;
      margin: 16px 0;
      background: white;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
  "
)

# Example 4: Mobile-Optimized Educational Interface
# Create educational assessment configuration
educational_config <- list(
  title = "Mathematics Proficiency Test",
  subtitle = "Grade 8 Assessment",
  max_items = 25,
  show_progress = TRUE,
  enable_theme_switching = TRUE
)

# Educational theme with bright colors
educational_theme <- list(
  name = "Educational Theme",
  primary_color = "#28a745",
  background_color = "#f8f9fa",
  font_family = "'Comic Sans MS', cursive",
  logo_path = "school_logo.png"
)

# Build educational UI with mobile optimization
educational_ui <- build_study_ui(
  study_config = educational_config,
  theme_config = educational_theme,
  enable_responsive = TRUE,
  custom_css = "
    @media (max-width: 768px) {
      .main-container {
        padding: 10px;
      }
      .question-text {
        font-size: 18px;
        line-height: 1.5;
      }
      .response-options {
        margin-top: 20px;
      }
    }
    .educational-header {
      background: linear-gradient(45deg, #28a745, #20c997);
      color: white;
      padding: 20px;
      text-align: center;
    }
  "
)

# Example 5: Advanced UI with Custom JavaScript
# Create advanced configuration
advanced_config <- list(
  title = "Advanced Personality Research",
  subtitle = "Longitudinal Study",
  max_items = 50,
  show_progress = TRUE,
  enable_theme_switching = TRUE
)

# Advanced theme
advanced_theme <- list(
  name = "Research Theme",
  primary_color = "#6f42c1",
  background_color = "#f8f9fa",
  font_family = "'Inter', sans-serif",
  logo_path = "research_logo.png"
)

# Custom JavaScript for analytics and interactions
custom_js <- "
  // Response time tracking
  let responseStartTime = Date.now();
  
  // Track user interactions
  document.addEventListener('click', function(e) {
    if (e.target.type === 'radio') {
      const responseTime = Date.now() - responseStartTime;
      Shiny.setInputValue('response_time', responseTime);
    }
  });
  
  // Accessibility enhancements
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Tab') {
      document.body.classList.add('keyboard-navigation');
    }
  });
"

# Build advanced UI
advanced_ui <- build_study_ui(
  study_config = advanced_config,
  theme_config = advanced_theme,
  enable_responsive = TRUE,
  enable_accessibility = TRUE,
  custom_js = custom_js,
  additional_assets = list(
    css = c("https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap"),
    js = c("https://cdn.jsdelivr.net/npm/chart.js")
  )
)

# Example 6: Complete Assessment Application
# Create complete Shiny application
create_complete_assessment <- function(config, theme, item_bank) {
  # Build UI
  ui <- build_study_ui(
    study_config = config,
    theme_config = theme,
    enable_responsive = TRUE,
    enable_accessibility = TRUE
  )
  
  # Create server function
  server <- function(input, output, session) {
    # Initialize reactive values
    rv <- init_reactive_values(config)
    
    # Launch study logic would go here
    # This would typically use launch_study() function
    
    output$ui_status <- renderText({
      "Assessment UI loaded successfully"
    })
  }
  
  # Return Shiny app
  return(shinyApp(ui = ui, server = server))
}

# Example usage (commented out to prevent data conflicts):
# data(bfi_items)
# config <- create_study_config(name = "BFI Assessment", model = "GRM")

# This would create a complete Shiny application
# app <- create_complete_assessment(study_config, NULL, bfi_items)
# runApp(app)

# Example 7: UI Validation and Testing
# Test UI generation and validation
test_ui_generation <- function() {
  cat("Testing UI generation...\n")
  
  # Test configurations
  test_configs <- list(
    basic = list(title = "Basic Test"),
    advanced = list(title = "Advanced Test", max_items = 30, show_progress = TRUE),
    minimal = list(title = "Minimal Test", show_progress = FALSE)
  )
  
  # Test themes
  test_themes <- list(
    default = NULL,
    custom = list(primary_color = "#007bff", background_color = "#ffffff")
  )
  
  results <- list()
  
  for (config_name in names(test_configs)) {
    for (theme_name in names(test_themes)) {
      cat("Testing:", config_name, "config with", theme_name, "theme\n")
      
      tryCatch({
        ui <- build_study_ui(
          study_config = test_configs[[config_name]],
          theme_config = test_themes[[theme_name]]
        )
        
        results[[paste(config_name, theme_name, sep = "_")]] <- "SUCCESS"
        cat("  [OK] Success\n")
        
      }, error = function(e) {
        results[[paste(config_name, theme_name, sep = "_")]] <- paste("ERROR:", e$message)
        cat("  X Error:", e$message, "\n")
      })
    }
  }
  
  cat("\nUI Generation Test Results:\n")
  cat("===========================\n")
  for (test_name in names(results)) {
    cat(sprintf("\%-20s: \%s\n", test_name, results[[test_name]]))
  }
  
  return(results)
}

# Run UI tests
test_results <- test_ui_generation()
}

}
\references{
Chang, W., Cheng, J., Allaire, J., Xie, Y., & McPherson, J. (2021). 
shiny: Web Application Framework for R. R package version 1.6.0. 
\url{https://CRAN.R-project.org/package=shiny}
}
\seealso{
\itemize{
  \item \code{\link{scrape_website_ui}} for theme asset extraction
  \item \code{\link{launch_study}} for complete assessment workflow
  \item \code{\link{create_study_config}} for configuration setup
  \item \code{\link{get_builtin_themes}} for available built-in themes
}
}
\keyword{UI}
\keyword{accessibility}
\keyword{interface}
\keyword{responsive-design}
\keyword{shiny}
\keyword{themes}
